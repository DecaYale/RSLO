model: {
  second: {
    use_GN: false#true
    icp_iter: 2 
    # sync_bn: true
    network_class_name: "UnVoxelOdomNetICP3"#"UnVoxelOdomNetICP"#"UnVoxelOdomNetICP2"#"VoxelOdomNet"
    voxel_generator {
      # point_cloud_range : [0, -40, -3, 70.4, 40, 8] # [x0,y0,z0, x1,y1,z1]
      #point_cloud_range : [-68.8, -40, -3, 68.8, 40, 5] # [x0,y0,z0, x1,y1,z1]
      point_cloud_range : [-70.4, -38.4, -3, 70.4, 38.4, 5] # [x0,y0,z0, x1,y1,z1]
      # point_cloud_range : [0, -32.0, -3, 52.8, 32.0, 1]
      # voxel_size : [0.05, 0.05, 0.2]
      voxel_size : [0.1, 0.1, 0.2]
      max_number_of_points_per_voxel : 10#5
      block_factor :1 
      block_size : 8 
      height_threshold : -1#0.05
    }

    voxel_feature_extractor: {
      module_class_name: "SimpleVoxel_XYZINormalC"#"SimpleVoxel"
      num_filters: [16]
      with_distance: false
      num_input_features: 7#8
      not_use_norm: true

    }
    middle_feature_extractor: {
      module_class_name: "SpMiddleFHDWithCov2_3"#"SpMiddleFHDWithConf4_1"#"SpMiddleFHD"
      # num_filters_down1: [] # protobuf don't support empty list.
      # num_filters_down2: []
      downsample_factor: 8
      num_input_features: 7#8
      # not_use_norm: true
      bn_type:"None"
      #not_use_norm: false 
      use_leakyReLU: true
    }

    odom_predictor:{
      module_class_name : "UNRResNetOdomPredEncDecSVDTempMask" #"UNRResNetOdomPredEncDecSVD"#"RResNetOdomPredEncDec"
      num_input_features :128
      layer_nums: [3,5,5]
      layer_strides:[2,2,2]
      num_filters: [128, 128, 256]
      upsample_strides:[2,2,2]#[1,2,4]
      num_upsample_filters:[128,64,64] #[256, 256, 256]
      pool_size : 1 
      pool_type: "avg_pool"
      cycle_constraint : true
      # not_use_norm: false
      bn_type:"SyncBN"
      pred_pyramid_motion: true
      # use_sparse_conv: false
      conv_type:"mask_conv"
      odom_format: "rx+t"#"r(x+t)"
      dense_predict: true
      dropout: 0.0000000000000000000001#0.2
       conf_type: "softmax"#"linear"
      use_deep_supervision:true
      use_svd: false
    } 
    
    loss: {
      pyloss_exp_w_base:0.5
      rotation_loss{
        loss_type: "AdaptiveWeightedL2" #"AdaptiveWeightedL2RMatrixLoss"# #"AdaptiveWeightedL2",
        weight: 1#0,
        init_alpha: -2.5
      }
      translation_loss{
        loss_type: "AdaptiveWeightedL2",
        weight: 1,
        init_alpha: 0
      }
       consistency_loss{
        loss_type: "Aleat5_1ChamferL2NormalWeightedALLSVDLoss"#"ChamferL2NormalWeightedALLSVDLoss"#"ChamferL2NormalWeightedALLLoss"#"ChamferL2Loss"#"CosineDistance",
        weight: 1,#10#1,
        penalize_ratio: 0.97#0.99#0.9999#0.95#0.9999
        norm: false
        pred_downsample_ratio: 1
        reg_weight: 0.005#0.0005

        sph_weight:1
        # sample_block_size: [0.5,1,1]
      }
    }
    num_point_features: 7#8#4 # model's num point feature should be independent of dataset
    # Outputs
    use_sigmoid_score: true
    encode_background_as_zeros: true


    # Loss
  

    # Postprocess
    post_center_limit_range: [0, -40, -2.2, 70.4, 40, 0.8]

  }
}

train_input_reader: {
  dataset: {
    dataset_class_name: "KittiDatasetHDF5"
    # dataset_class_name: "KittiDataset"
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/train_data_info7.pkl"
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/train_val_hier.h5"
    kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/all.h5"
    kitti_root_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset"
    seq_length: 3
    skip: 1
    step:1
    random_skip: false#true
  }

  batch_size: 1#2#3#1#3 #8
  preprocess: {
    max_number_of_voxels: 40000#17000
    shuffle_points: false#true
    num_workers: 2#2
    # groundtruth_localization_noise_std: [1.0, 1.0, 0.5]
    # groundtruth_rotation_uniform_noise: [-0.3141592654, 0.3141592654]
    # groundtruth_rotation_uniform_noise: [-1.57, 1.57]
    # groundtruth_rotation_uniform_noise: [-0.78539816, 0.78539816]
    # global_rotation_uniform_noise: [-0.78539816, 0.78539816]
    # global_scaling_uniform_noise: [0.95, 1.05]
    # global_random_rotation_range_per_object: [0, 0] # pi/4 ~ 3pi/4
    # global_translate_noise_std: [0, 0, 0]
    # anchor_area_threshold: -1
    remove_points_after_sample: true
    groundtruth_points_drop_percentage: 0.0
    groundtruth_drop_max_keep_points: 15
    # remove_unknown_examples: false
    # sample_importance: 1.0
    random_flip_x: false
    random_flip_y: true#false 
    # remove_environment: false
    # downsample_voxel_sizes: [0.05,0.1,0.2,0.4]
    downsample_voxel_sizes: [0.1] #[0.1,0.2,0.4, 0.8]

  }
}

train_config: {
   optimizer: {
     adam_optimizer: {
       learning_rate: {
         one_cycle: {
           lr_max: 0.8e-3#1e-3#2e-3
           moms: [0.95, 0.85]
           div_factor: 10.0
           pct_start: 0.05
         }
       }
       weight_decay: 1e-5#0.001
     }
     fixed_weight_decay: true
     use_moving_average: false
   }
  #optimizer: {
  #  adam_optimizer: {
  #    learning_rate: {
  #      exponential_decay: {
  #        initial_learning_rate: 0.002#0.008#0.002
  #        decay_length: 0.05#0.1#0.1
  #        decay_factor: 0.8#0.8
  #        staircase: True
  #      }
  #    }
  #    weight_decay: 1e-6#0.0001
  #  }
  #  fixed_weight_decay: false
  #  use_moving_average: false
  #}
  # steps: 99040 # 1238 * 120
  # s: 49520 # 619 * 80
  # steps: 30950 # 619 * 80
  # steps_per_eval: 3095 # 619 * 5
  steps: 200000#200000#42500#170000#12750#23200*20/8/4 #23200 # 464 * 50
  steps_per_eval: 4000#425#1700#850#637#23200/8#2320 # 619 * 5

  # save_checkpoints_secs : 1800 # half hour
  # save_summary_steps : 10
  enable_mixed_precision: false 
  loss_scale_factor: -1
  clear_metrics_every_epoch: true
}

eval_input_reader: {
  dataset: {
    dataset_class_name: "KittiDatasetHDF5"
    # dataset_class_name: "KittiDataset"
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/eval_data_info4.pkl" #TODO:
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/train_val_hier.h5"
    kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/all.h5"
    # kitti_info_path: "/media/yy/960evo/datasets/kitti/kitti_infos_test.pkl"
    kitti_root_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset"
    seq_length: 2
    skip: 1 
    step:1
    random_skip: false 
  }
  batch_size: 1
  preprocess: {
    max_number_of_voxels: 40000
    shuffle_points: false
    num_workers: 1
    anchor_area_threshold: -1
    remove_environment: false
  }
}
eval_train_input_reader: {
  dataset: {
    dataset_class_name: "KittiDatasetHDF5"
    # dataset_class_name: "KittiDataset"
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/eval_train_data_info.pkl" #TODO:
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/train_val_hier.h5"
    kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/all.h5"
    # kitti_info_path: "/media/yy/960evo/datasets/kitti/kitti_infos_test.pkl"
    kitti_root_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset"
    seq_length: 2
    skip:1 
    step:1
    random_skip: false
  }
  batch_size: 1
  preprocess: {
    max_number_of_voxels: 40000
    shuffle_points: false
    num_workers: 1
  }
}