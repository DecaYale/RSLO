model: {
  second: {
    use_GN: false
    icp_iter: 2 
    network_class_name: "UnVoxelOdomNetICP3"
    voxel_generator {
      point_cloud_range : [-70.4, -38.4, -3, 70.4, 38.4, 5] # [x0,y0,z0, x1,y1,z1]
      voxel_size : [0.1, 0.1, 0.2]
      max_number_of_points_per_voxel : 10
      block_factor :1 
      block_size : 8 
      height_threshold : -1 #0.05
    }

    voxel_feature_extractor: {
      module_class_name: "SimpleVoxel_XYZINormalC"
      num_filters: [16]
      with_distance: false
      num_input_features: 7
      not_use_norm: true

    }
    middle_feature_extractor: {
      module_class_name: "SpMiddleFHDWithCov2_3"
      downsample_factor: 8
      num_input_features: 7
      bn_type:"None"
      use_leakyReLU: true
    }

    odom_predictor:{
      module_class_name : "UNRResNetOdomPredEncDecSVDTempMask" 
      num_input_features :128
      layer_nums: [3,5,5]
      layer_strides:[2,2,2]
      num_filters: [128, 128, 256]
      upsample_strides:[2,2,2]#[1,2,4]
      num_upsample_filters:[128,64,64] 
      pool_size : 1 
      pool_type: "avg_pool"
      cycle_constraint : true
      # not_use_norm: false
      bn_type:"SyncBN"
      pred_pyramid_motion: true
      # use_sparse_conv: false
      conv_type:"mask_conv"
      odom_format: "rx+t" #"r(x+t)"
      dense_predict: true
      dropout: 0.0000000000000000000001 
       conf_type: "softmax"#"linear"
      use_deep_supervision:true
      use_svd: false
    } 
    
    loss: {
      pyloss_exp_w_base:0.5
      rotation_loss{
        loss_type: "AdaptiveWeightedL2" 
        weight: 1,
        init_alpha: -2.5
      }
      translation_loss{
        loss_type: "AdaptiveWeightedL2",
        weight: 1,
        init_alpha: 0
      }
       consistency_loss{
        loss_type: "Aleat5_1ChamferL2NormalWeightedALLSVDLoss"
        weight: 1,
        penalize_ratio: 0.97
        norm: false
        pred_downsample_ratio: 1
        reg_weight: 0.005#0.0005
        sph_weight:1
      }
    }
    num_point_features: 7 # model's num point feature should be independent of dataset
    # Outputs
    use_sigmoid_score: true
    encode_background_as_zeros: true
  }
}


eval_input_reader: {
  dataset: {
    dataset_class_name: "KittiDatasetHDF5"
    # dataset_class_name: "KittiDataset"
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/eval_data_info4.pkl" #TODO:
    # kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/train_val_hier.h5"
    kitti_info_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset/all.h5"
    kitti_root_path: "/mnt/lustre/xuyan2/datasets/kitti/odometry/dataset"
    seq_length: 2
    skip: 1 
    step:1
    random_skip: false 
  }
  batch_size: 1
  preprocess: {
    max_number_of_voxels: 40000
    shuffle_points: false
    num_workers: 1
    anchor_area_threshold: -1
    remove_environment: false
  }
}
